This patch adds driver support for the vibator device of the FIC/OpenMoko
Neo1973 GSM phone. The driver uses the existing LED class driver framework,
since there's a lot of similarity between the LED and the vibrator function.

Signed-off-by: Harald Welte <laforge@openmoko.org>

Index: linux-2.6/drivers/leds/Kconfig
===================================================================
--- linux-2.6.orig/drivers/leds/Kconfig
+++ linux-2.6/drivers/leds/Kconfig
@@ -57,7 +57,7 @@
 
 config LEDS_S3C24XX
 	tristate "LED Support for Samsung S3C24XX GPIO LEDs"
-	depends on LEDS_CLASS && ARCH_S3C2410
+	depends on LEDS_CLASS && ARCH_S3C2410 && S3C2410_PWM
 	help
 	  This option enables support for LEDs connected to GPIO lines
 	  on Samsung S3C24XX series CPUs, such as the S3C2410 and S3C2440.
@@ -114,6 +114,12 @@
 	help
 	  This option enables support for the CM-X270 LEDs.
 
+config LEDS_NEO1973_VIBRATOR
+	tristate "Vibrator Support for the FIC Neo1973 GSM phone"
+	depends on LEDS_CLASS && MACH_NEO1973
+	help
+	  This option enables support for the vibrator on the FIC Neo1973.
+
 comment "LED Triggers"
 
 config LEDS_TRIGGERS
Index: linux-2.6/drivers/leds/Makefile
===================================================================
--- linux-2.6.orig/drivers/leds/Makefile
+++ linux-2.6/drivers/leds/Makefile
@@ -19,6 +19,7 @@
 obj-$(CONFIG_LEDS_COBALT_RAQ)		+= leds-cobalt-raq.o
 obj-$(CONFIG_LEDS_GPIO)			+= leds-gpio.o
 obj-$(CONFIG_LEDS_CM_X270)              += leds-cm-x270.o
+obj-$(CONFIG_LEDS_NEO1973_VIBRATOR)	+= leds-neo1973-vibrator.o
 
 # LED Triggers
 obj-$(CONFIG_LEDS_TRIGGER_TIMER)	+= ledtrig-timer.o
Index: linux-2.6/drivers/leds/leds-neo1973-vibrator.c
===================================================================
--- /dev/null
+++ linux-2.6/drivers/leds/leds-neo1973-vibrator.c
@@ -0,0 +1,178 @@
+/*
+ * LED driver for the vibrator of the FIC Neo1973 GSM Phone
+ *
+ * (C) 2006-2007 by OpenMoko, Inc.
+ * Author: Harald Welte <laforge@openmoko.org>
+ * All rights reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ *
+ * Javi Roman <javiroman@kernel-labs.org>:
+ * 	Implement PWM support for GTA01Bv4 and later
+ */
+
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/platform_device.h>
+#include <linux/leds.h>
+#include <asm/hardware.h>
+#include <asm/mach-types.h>
+#include <asm/arch/pwm.h>
+#include <asm/arch/gta01.h>
+#include <asm/plat-s3c/regs-timer.h>
+
+#define COUNTER 64
+
+struct gta01_vib_priv
+{
+	struct led_classdev cdev;
+	unsigned int gpio;
+	struct mutex mutex;
+	unsigned int has_pwm;
+	struct s3c2410_pwm pwm;
+};
+
+static void gta01vib_vib_set(struct led_classdev *led_cdev,
+		enum led_brightness value)
+{
+	struct gta01_vib_priv *vp =
+		container_of(led_cdev, struct gta01_vib_priv, cdev);
+
+	/*
+ 	 * value == 255 -> 99% duty cycle (full power)
+ 	 * value == 128 -> 50% duty cycle (medium power)
+ 	 * value == 0 -> 0% duty cycle (zero power)
+ 	 */
+ 	mutex_lock(&vp->mutex);
+	if (vp->has_pwm) {
+		s3c2410_pwm_duty_cycle(value/4, &vp->pwm);
+	} else {
+		if (value)
+			s3c2410_gpio_setpin(vp->gpio, 1);
+		else
+			s3c2410_gpio_setpin(vp->gpio, 0);
+	}
+
+	mutex_unlock(&vp->mutex);
+}
+
+static struct gta01_vib_priv gta01_vib_led = {
+	.cdev = {
+		.name = "gta01:vibrator",
+		.brightness_set = gta01vib_vib_set,
+	},
+};
+
+#ifdef CONFIG_PM
+static int gta01vib_suspend(struct platform_device *dev, pm_message_t state)
+{
+	led_classdev_suspend(&gta01_vib_led.cdev);
+	return 0;
+}
+
+static int gta01vib_resume(struct platform_device *dev)
+{
+	led_classdev_resume(&gta01_vib_led.cdev);
+	return 0;
+}
+#endif
+
+static int gta01vib_init_hw(struct gta01_vib_priv *vp)
+{
+	int rc;
+
+	rc = s3c2410_pwm_init(&vp->pwm);
+	if (rc) {
+		return rc;
+	}
+
+	vp->pwm.timerid = PWM3;
+	/* use same prescaler as arch/arm/plat-s3c24xx/time.c */
+	vp->pwm.prescaler = (6 - 1) / 2;
+	vp->pwm.divider = S3C2410_TCFG1_MUX3_DIV2;
+	vp->pwm.counter = COUNTER;
+	vp->pwm.comparer = COUNTER;
+
+	rc = s3c2410_pwm_enable(&vp->pwm);
+	if (rc) {
+		return rc;
+	}
+
+	s3c2410_pwm_start(&vp->pwm);
+
+	return 0;
+}
+
+static int __init gta01vib_probe(struct platform_device *pdev)
+{
+	struct resource *r;
+	int rc;
+
+	if (!machine_is_neo1973_gta01())
+		return -EIO;
+
+	r = platform_get_resource(pdev, 0, 0);
+	if (!r || !r->start)
+		return -EIO;
+
+	gta01_vib_led.gpio = r->start;
+
+	/* TOUT3 */
+	if (gta01_vib_led.gpio == S3C2410_GPB3) {
+		rc = gta01vib_init_hw(&gta01_vib_led);
+		if (rc) {
+			return rc;
+		}
+
+		s3c2410_pwm_duty_cycle(0, &gta01_vib_led.pwm);
+		s3c2410_gpio_cfgpin(gta01_vib_led.gpio, S3C2410_GPB3_TOUT3);
+		gta01_vib_led.has_pwm = 1;
+	}
+
+	mutex_init(&gta01_vib_led.mutex);
+
+	return led_classdev_register(&pdev->dev, &gta01_vib_led.cdev);
+}
+
+static int gta01vib_remove(struct platform_device *pdev)
+{
+	if (gta01_vib_led.has_pwm)
+		s3c2410_pwm_disable(&gta01_vib_led.pwm);
+
+	led_classdev_unregister(&gta01_vib_led.cdev);
+
+	mutex_destroy(&gta01_vib_led.mutex);
+
+	return 0;
+}
+
+static struct platform_driver gta01vib_driver = {
+	.probe		= gta01vib_probe,
+	.remove		= gta01vib_remove,
+#ifdef CONFIG_PM
+	.suspend	= gta01vib_suspend,
+	.resume		= gta01vib_resume,
+#endif
+	.driver		= {
+		.name		= "neo1973-vibrator",
+	},
+};
+
+static int __init gta01vib_init(void)
+{
+	return platform_driver_register(&gta01vib_driver);
+}
+
+static void __exit gta01vib_exit(void)
+{
+ 	platform_driver_unregister(&gta01vib_driver);
+}
+
+module_init(gta01vib_init);
+module_exit(gta01vib_exit);
+
+MODULE_AUTHOR("Harald Welte <laforge@openmoko.org>");
+MODULE_DESCRIPTION("FIC Neo1973 vibrator driver");
+MODULE_LICENSE("GPL");
