Modify GTA02 power manager for bluetooth.

From: Willie <willie_chen@openmoko.com>

1. Default power value isn't correct. Now we set pcf50633 LDO4 to 3.2 voltage.

2. Separate GTA01 and GTA02 source code.

3. Add pcf50633 API for enable register.
---

 arch/arm/mach-s3c2440/mach-gta02.c    |    4 +-
 arch/arm/plat-s3c24xx/neo1973_pm_bt.c |   42 +++++++++++++++++++++--
 drivers/i2c/chips/pcf50633.c          |   59 +++++++++++++++++++++++++++++++++
 include/linux/pcf50633.h              |   11 ++++++
 4 files changed, 109 insertions(+), 7 deletions(-)


Index: linux-2.6.24-rc7/arch/arm/mach-s3c2440/mach-gta02.c
===================================================================
--- linux-2.6.24-rc7.orig/arch/arm/mach-s3c2440/mach-gta02.c
+++ linux-2.6.24-rc7/arch/arm/mach-s3c2440/mach-gta02.c
@@ -209,10 +209,10 @@
 			},
 		},
 		[PCF50633_REGULATOR_LDO4] = {
-			.name		= "gl_2v5",
+			.name		= "bt_3v2",
 			.voltage	= {
 				.init	= 2500,
-				.max	= 2500,
+				.max	= 3300,
 			},
 		},
 		[PCF50633_REGULATOR_LDO5] = {
Index: linux-2.6.24-rc7/arch/arm/plat-s3c24xx/neo1973_pm_bt.c
===================================================================
--- linux-2.6.24-rc7.orig/arch/arm/plat-s3c24xx/neo1973_pm_bt.c
+++ linux-2.6.24-rc7/arch/arm/plat-s3c24xx/neo1973_pm_bt.c
@@ -16,12 +16,19 @@
 #include <linux/kernel.h>
 #include <linux/platform_device.h>
 
-#include <linux/pcf50606.h>
-
 #include <asm/hardware.h>
 #include <asm/mach-types.h>
+
+#ifdef CONFIG_MACH_NEO1973_GTA01
 #include <asm/arch/gta01.h>
+#include <linux/pcf50606.h>
+#endif
+
+#ifdef CONFIG_MACH_NEO1973_GTA02
 #include <asm/arch/gta02.h>
+#include <linux/pcf50633.h>
+#endif
+
 
 #define DRVMSG "FIC Neo1973 Bluetooth Power Management"
 
@@ -30,6 +37,8 @@
 {
 	if (!strcmp(attr->attr.name, "power_on")) {
 		switch (machine_arch_type) {
+
+#ifdef CONFIG_MACH_NEO1973_GTA01
 		case MACH_TYPE_NEO1973_GTA01:
 			if (pcf50606_onoff_get(pcf50606_global,
 						PCF50606_REGULATOR_D1REG) &&
@@ -37,21 +46,33 @@
 						 PCF50606_REGULATOR_D1REG) == 3100)
 				goto out_1;
 			break;
+#endif /* CONFIG_MACH_NEO1973_GTA01 */
+
+#ifdef CONFIG_MACH_NEO1973_GTA02
 		case MACH_TYPE_NEO1973_GTA02:
 			if (s3c2410_gpio_getpin(GTA02_GPIO_BT_EN))
 				goto out_1;
 			break;
+#endif /* CONFIG_MACH_NEO1973_GTA02 */
+
 		}
 	} else if (!strcmp(attr->attr.name, "reset")) {
 		switch (machine_arch_type) {
+
+#ifdef CONFIG_MACH_NEO1973_GTA01
 		case MACH_TYPE_NEO1973_GTA01:
 			if (s3c2410_gpio_getpin(GTA01_GPIO_BT_EN) == 0)
 				goto out_1;
 			break;
+#endif /* CONFIG_MACH_NEO1973_GTA01 */
+
+#ifdef CONFIG_MACH_NEO1973_GTA02
 		case MACH_TYPE_NEO1973_GTA02:
 			if (s3c2410_gpio_getpin(GTA02_GPIO_BT_EN) == 0)
 				goto out_1;
 			break;
+#endif /* CONFIG_MACH_NEO1973_GTA02 */
+
 		}
 	}
 
@@ -64,9 +85,12 @@
 			const char *buf, size_t count)
 {
 	unsigned long on = simple_strtoul(buf, NULL, 10);
+	unsigned int vol;
 
 	if (!strcmp(attr->attr.name, "power_on")) {
 		switch (machine_arch_type) {
+
+#ifdef CONFIG_MACH_NEO1973_GTA01
 		case MACH_TYPE_NEO1973_GTA01:
 			/* if we are powering up, assert reset, then power,
 			 * then release reset */
@@ -80,22 +104,39 @@
 					   PCF50606_REGULATOR_D1REG, on);
 			s3c2410_gpio_setpin(GTA01_GPIO_BT_EN, on);
 			break;
+#endif /* CONFIG_MACH_NEO1973_GTA01 */
+
+#ifdef CONFIG_MACH_NEO1973_GTA02
 		case MACH_TYPE_NEO1973_GTA02:
+			s3c2410_gpio_setpin(GTA02_GPIO_BT_EN, on ? 0 : 1);
 			if (on)
-				s3c2410_gpio_setpin(GTA02_GPIO_BT_EN, 0);
-			else
-				s3c2410_gpio_setpin(GTA02_GPIO_BT_EN, 1);
+				pcf50633_voltage_set(pcf50633_global,
+					PCF50633_REGULATOR_LDO4, 3200);
+			pcf50633_ena_voltage(pcf50633_global,
+				PCF50633_REGULATOR_LDO4, on);
+			vol = pcf50633_voltage_get(pcf50633_global,
+				PCF50633_REGULATOR_LDO4);
+			dev_info(dev, "GTA02 Set PCF50633 LDO4 = %d\n", vol);
 			break;
+#endif /* CONFIG_MACH_NEO1973_GTA02 */
+
 		}
 	} else if (!strcmp(attr->attr.name, "reset")) {
 		/* reset is low-active, so we need to invert */
 		switch (machine_arch_type) {
+
+#ifdef CONFIG_MACH_NEO1973_GTA01
 		case MACH_TYPE_NEO1973_GTA01:
 			s3c2410_gpio_setpin(GTA01_GPIO_BT_EN, on ? 0 : 1);
 			break;
+#endif /* CONFIG_MACH_NEO1973_GTA01 */
+
+#ifdef CONFIG_MACH_NEO1973_GTA02
 		case MACH_TYPE_NEO1973_GTA02:
 			s3c2410_gpio_setpin(GTA02_GPIO_BT_EN, on ? 0 : 1);
 			break;
+#endif /* CONFIG_MACH_NEO1973_GTA02 */
+
 		}
 	}
 
@@ -143,18 +184,25 @@
 	dev_info(&pdev->dev, DRVMSG ": starting\n");
 
 	switch (machine_arch_type) {
+
+#ifdef CONFIG_MACH_NEO1973_GTA01
 	case MACH_TYPE_NEO1973_GTA01:
 		/* we make sure that the voltage is off */
 		pcf50606_onoff_set(pcf50606_global,
 				   PCF50606_REGULATOR_D1REG, 0);
+		/* we pull reset to low to make sure that the chip doesn't
+	 	 * drain power through the reset line */
+		s3c2410_gpio_setpin(GTA01_GPIO_BT_EN, 0);
 		break;
+#endif /* CONFIG_MACH_NEO1973_GTA01 */
+
+#ifdef CONFIG_MACH_NEO1973_GTA02
 	case MACH_TYPE_NEO1973_GTA02:
 		/* FIXME: implementation */
 		break;
+#endif /* CONFIG_MACH_NEO1973_GTA02 */
+
 	}
-	/* we pull reset to low to make sure that the chip doesn't
-	 * drain power through the reset line */
-	s3c2410_gpio_setpin(GTA01_GPIO_BT_EN, 0);
 
 	return sysfs_create_group(&pdev->dev.kobj, &gta01_bt_attr_group);
 }
Index: linux-2.6.24-rc7/drivers/i2c/chips/pcf50633.c
===================================================================
--- linux-2.6.24-rc7.orig/drivers/i2c/chips/pcf50633.c
+++ linux-2.6.24-rc7/drivers/i2c/chips/pcf50633.c
@@ -319,6 +319,20 @@
 	[PCF50633_REGULATOR_HCLDO]	= PCF50633_REG_HCLDOOUT,
 };
 
+static const u_int8_t ena_regulator_registers[__NUM_PCF50633_REGULATORS] = {
+	[PCF50633_REGULATOR_AUTO]	= PCF50633_REG_AUTOENA,
+	[PCF50633_REGULATOR_DOWN1]	= PCF50633_REG_DOWN1ENA,
+	[PCF50633_REGULATOR_DOWN2]	= PCF50633_REG_DOWN2ENA,
+	[PCF50633_REGULATOR_MEMLDO]	= PCF50633_REG_MEMLDOENA,
+	[PCF50633_REGULATOR_LDO1]	= PCF50633_REG_LDO1ENA,
+	[PCF50633_REGULATOR_LDO2]	= PCF50633_REG_LDO2ENA,
+	[PCF50633_REGULATOR_LDO3]	= PCF50633_REG_LDO3ENA,
+	[PCF50633_REGULATOR_LDO4]	= PCF50633_REG_LDO4ENA,
+	[PCF50633_REGULATOR_LDO5]	= PCF50633_REG_LDO5ENA,
+	[PCF50633_REGULATOR_LDO6]	= PCF50633_REG_LDO6ENA,
+	[PCF50633_REGULATOR_HCLDO]	= PCF50633_REG_HCLDOENA,
+};
+
 int pcf50633_onoff_set(struct pcf50633_data *pcf,
 		       enum pcf50633_regulator_id reg, int on)
 {
@@ -401,6 +415,29 @@
 }
 EXPORT_SYMBOL_GPL(pcf50633_voltage_set);
 
+int pcf50633_ena_voltage(struct pcf50633_data *pcf,
+			 enum pcf50633_regulator_id reg,
+			 u_int8_t on)
+{
+	u_int8_t regnr;
+
+	DEBUGP("pcf=%p, reg=%d", pcf, reg);
+
+	if(reg >= __NUM_PCF50633_REGULATORS)
+		return -EINVAL;
+
+	regnr = ena_regulator_registers[reg];
+	BUG_ON(regnr); /* in case we forgot one */
+
+	if (on)
+		reg_set_bit_mask(pcf, regnr, 0x01, 0x01);
+	else
+		reg_set_bit_mask(pcf, regnr, 0x01, 0x00);
+
+	return 0;
+}
+EXPORT_SYMBOL_GPL(pcf50633_ena_voltage);
+
 unsigned int pcf50633_voltage_get(struct pcf50633_data *pcf,
 			 enum pcf50633_regulator_id reg)
 {
Index: linux-2.6.24-rc7/include/linux/pcf50633.h
===================================================================
--- linux-2.6.24-rc7.orig/include/linux/pcf50633.h
+++ linux-2.6.24-rc7/include/linux/pcf50633.h
@@ -47,6 +47,11 @@
 pcf50633_voltage_get(struct pcf50633_data *pcf,
 		     enum pcf50633_regulator_id reg);
 extern int
+pcf50633_ena_voltage(struct pcf50633_data *pcf,
+		     enum pcf50633_regulator_id reg,
+			 u_int8_t on);
+
+extern int
 pcf50633_onoff_get(struct pcf50633_data *pcf,
 		   enum pcf50633_regulator_id reg);
 
