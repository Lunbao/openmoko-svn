Index: linux-2.6.24-rc8/arch/arm/mach-s3c2440/mach-gta02.c
===================================================================
--- linux-2.6.24-rc8.orig/arch/arm/mach-s3c2440/mach-gta02.c
+++ linux-2.6.24-rc8/arch/arm/mach-s3c2440/mach-gta02.c
@@ -374,8 +374,6 @@
 	&s3c_device_usbgadget,
 	&s3c_device_nand,
 	&s3c_device_ts,
-	&s3c_device_spi0,
-	&s3c_device_spi1,
 	&gta02_nor_flash,
 };
 
@@ -475,10 +473,12 @@
 	},
 };
 
+#if 0 /* currently this is not used and we use gpio spi */
 static struct glamo_spi_info glamo_spi_cfg = {
 	.board_size	= ARRAY_SIZE(gta02_spi_board_info),
 	.board_info	= gta02_spi_board_info,
 };
+#endif /* 0 */
 
 static struct glamo_spigpio_info glamo_spigpio_cfg = {
 	.pin_clk	= GLAMO_GPIO10_OUTPUT,
@@ -504,16 +504,13 @@
 
 /* SPI: Accelerometers attached to SPI of s3c244x */
 
-static void gta02_spi_acc_set_cs(struct s3c2410_spi_info *spi, int cs, int pol)
-{
-	s3c2410_gpio_setpin(cs, pol);
-}
-
 static const struct lis302dl_platform_data lis302_pdata[] = {
 	{
-		.name		= "lis302-1 (top)"
+		.name		= "lis302-1 (top)",
+		.pin_chip_select= S3C2410_GPD12,
 	}, {
-		.name		= "lis302-2 (bottom)"
+		.name		= "lis302-2 (bottom)",
+		.pin_chip_select= S3C2410_GPD13,
 	},
 };
 
@@ -524,7 +521,7 @@
 		.irq		= GTA02_IRQ_GSENSOR_1,
 		.max_speed_hz	= 400 * 1000,
 		.bus_num	= 1,
-		.chip_select	= S3C2410_GPD12,
+		.chip_select	= 0,
 		.mode		= SPI_MODE_3,
 	},
 	{
@@ -533,15 +530,63 @@
 		.irq		= GTA02_IRQ_GSENSOR_2,
 		.max_speed_hz	= 400 * 1000,
 		.bus_num	= 1,
-		.chip_select	= S3C2410_GPD13,
+		.chip_select	= 1,
 		.mode		= SPI_MODE_3,
 	},
 };
 
-static struct s3c2410_spi_info gta02_spi_acc_cfg = {
-	.set_cs		= gta02_spi_acc_set_cs,
+static void spi_acc_cs(struct s3c2410_spigpio_info *spigpio_info, int cs)
+{
+	struct lis302dl_platform_data * plat_data =
+				(struct lis302dl_platform_data *)spigpio_info->
+						     board_info->platform_data;
+	switch (cs) {
+	case BITBANG_CS_ACTIVE:
+		s3c2410_gpio_setpin(plat_data->pin_chip_select, 0);
+		break;
+	case BITBANG_CS_INACTIVE:
+		s3c2410_gpio_setpin(plat_data->pin_chip_select, 1);
+		break;
+	}
+}
+
+static struct s3c2410_spigpio_info spi_gpio_cfg = {
+	.pin_clk	= S3C2410_GPG7,
+	.pin_mosi	= S3C2410_GPG6,
+	.pin_miso	= S3C2410_GPG5,
 	.board_size	= ARRAY_SIZE(gta02_spi_acc_bdinfo),
 	.board_info	= gta02_spi_acc_bdinfo,
+	.chip_select	= &spi_acc_cs,
+	.num_chipselect = 2,
+};
+
+static struct resource s3c_spi_acc_resource[] = {
+	[0] = {
+		.start = S3C2410_GPG3,
+		.end   = S3C2410_GPG3,
+	},
+	[1] = {
+		.start = S3C2410_GPG5,
+		.end   = S3C2410_GPG5,
+	},
+	[2] = {
+		.start = S3C2410_GPG6,
+		.end   = S3C2410_GPG6,
+	},
+	[3] = {
+		.start = S3C2410_GPG7,
+		.end   = S3C2410_GPG7,
+	},
+};
+
+static struct platform_device s3c_device_spi_acc = {
+	.name		  = "spi_s3c24xx_gpio",
+	.id		  = 1,
+	.num_resources	  = ARRAY_SIZE(s3c_spi_acc_resource),
+	.resource	  = s3c_spi_acc_resource,
+	.dev = {
+		.platform_data = &spi_gpio_cfg,
+	},
 };
 
 static struct resource gta02_led_resources[] = {
@@ -784,7 +829,6 @@
 	s3c_device_usb.dev.platform_data = &gta02_usb_info;
 	s3c_device_nand.dev.platform_data = &gta02_nand_info;
 	s3c_device_sdi.dev.platform_data = &gta02_mmc_cfg;
-	s3c_device_spi1.dev.platform_data = &gta02_spi_acc_cfg;
 
 	/* Only GTA02v1 has a SD_DETECT GPIO.  Since the slot is not
 	 * hot-pluggable, this is not required anyway */
@@ -796,6 +840,12 @@
 		break;
 	}
 
+	/* acc sensor chip selects */
+	s3c2410_gpio_setpin(S3C2410_GPD12, 1);
+	s3c2410_gpio_cfgpin(S3C2410_GPD12, S3C2410_GPIO_OUTPUT);
+	s3c2410_gpio_setpin(S3C2410_GPD13, 1);
+	s3c2410_gpio_cfgpin(S3C2410_GPD13, S3C2410_GPIO_OUTPUT);
+
 	INIT_WORK(&gta02_udc_vbus_drawer.work, __gta02_udc_vbus_draw);
 	s3c24xx_udc_set_platdata(&gta02_udc_cfg);
 	set_s3c2410ts_info(&gta02_ts_cfg);
@@ -824,6 +874,7 @@
 		break;
 	}
 
+	platform_device_register(&s3c_device_spi_acc);
 	platform_device_register(&gta01_button_dev);
 	platform_device_register(&gta01_pm_gsm_dev);
 
Index: linux-2.6.24-rc8/drivers/input/misc/lis302dl.c
===================================================================
--- linux-2.6.24-rc8.orig/drivers/input/misc/lis302dl.c
+++ linux-2.6.24-rc8/drivers/input/misc/lis302dl.c
@@ -84,6 +84,7 @@
 
 enum lis302dl_reg_ctrl3 {
 	LIS302DL_CTRL3_PP_OD		= 0x40,
+	LIS302DL_CTRL3_IHL		= 0x80,
 };
 
 enum lis302dl_reg_status {
@@ -134,16 +135,17 @@
 
 /* lowlevel register access functions */
 
-#define READ_BIT	0x01
-#define MS_BIT		0x02
-#define ADDR_SHIFT	2
+#define READ_BIT	0x80
+#define	ADDR_MASK	0x3f
 
 static inline u_int8_t __reg_read(struct lis302dl_info *lis, u_int8_t reg)
 {
 	int rc;
 	u_int8_t cmd;
 
-	cmd = (reg << ADDR_SHIFT) | READ_BIT;
+	BUG_ON(reg & ~ADDR_MASK);
+
+	cmd = reg | READ_BIT;
 
 	rc = spi_w8r8(lis->spi_dev, cmd);
 
@@ -165,7 +167,9 @@
 {
 	u_int8_t buf[2];
 
-	buf[0] = (reg << ADDR_SHIFT);
+	BUG_ON(reg & ~ADDR_MASK);
+
+	buf[0] = reg;
 	buf[1] = val;
 
 	return spi_write(lis->spi_dev, buf, sizeof(buf));
@@ -218,10 +222,16 @@
 {
 	struct lis302dl_info *lis = dev_get_drvdata(&spi->dev);
 
-	if (int_pin == 1)
+	switch (int_pin) {
+	case 1:
 		reg_set_bit_mask(lis, LIS302DL_REG_CTRL3, 0x07, mode);
-	else if (int_pin == 2)
+		break;
+	case 2:
 		reg_set_bit_mask(lis, LIS302DL_REG_CTRL3, 0x38, mode << 3);
+		break;
+	default:
+		BUG();
+	}
 }
 
 static void _report_btn_single(struct input_dev *inp, int btn)
@@ -388,6 +398,7 @@
 static struct attribute *lis302dl_sysfs_entries[] = {
 	&dev_attr_sample_rate.attr,
 	&dev_attr_full_scale.attr,
+	NULL
 };
 
 static struct attribute_group lis302dl_attr_group = {
@@ -459,12 +470,15 @@
 		kfree(lis);
 		return -ENODEV;
 	}
+	/* switch interrupt to open collector, active-low */
+	reg_write(lis, LIS302DL_REG_CTRL3,
+	    LIS302DL_CTRL3_PP_OD | LIS302DL_CTRL3_IHL);
+	lis302dl_int_mode(spi, 1, LIX302DL_INTMODE_DATA_READY);
+	lis302dl_int_mode(spi, 2, LIX302DL_INTMODE_CLICK);
 
-	/* switch interrupt to open collector */
-	reg_write(lis, LIS302DL_CTRL3_PP_OD, 0x7c);
-
+	/* Fix me: always interrupt */
 	rc = request_irq(lis->spi_dev->irq, lis302dl_interrupt, IRQF_DISABLED,
-			 "lis302dl", NULL);
+			 "lis302dl", lis);
 	if (rc < 0) {
 		dev_err(&spi->dev, "error requesting IRQ %d\n",
 			lis->spi_dev->irq);
Index: linux-2.6.24-rc8/drivers/spi/spi_s3c24xx_gpio.c
===================================================================
--- linux-2.6.24-rc8.orig/drivers/spi/spi_s3c24xx_gpio.c
+++ linux-2.6.24-rc8/drivers/spi/spi_s3c24xx_gpio.c
@@ -91,7 +91,7 @@
 	struct s3c2410_spigpio *sg = spidev_to_sg(dev);
 
 	if (sg->info && sg->info->chip_select)
-		(sg->info->chip_select)(sg->info, value);
+		(sg->info->chip_select)(sg->info, dev->chip_select, value);
 }
 
 static int s3c2410_spigpio_probe(struct platform_device *dev)
@@ -113,9 +113,11 @@
 
 	platform_set_drvdata(dev, sp);
 
-	/* copy in the plkatform data */
+	/* copy in the platform data */
 	info = sp->info = dev->dev.platform_data;
 
+	master->num_chipselect = info->num_chipselect;
+
 	/* setup spi bitbang adaptor */
 	sp->bitbang.master = spi_master_get(master);
 	sp->bitbang.master->bus_num = info->bus_num;
@@ -146,12 +148,17 @@
 	/* register the chips to go with the board */
 
 	for (i = 0; i < sp->info->board_size; i++) {
+		struct spi_device *spidev;
+
 		dev_info(&dev->dev, "registering %p: %s\n",
 			 &sp->info->board_info[i],
 			 sp->info->board_info[i].modalias);
 
 		sp->info->board_info[i].controller_data = sp;
-		spi_new_device(master, sp->info->board_info + i);
+		spidev = spi_new_device(master, sp->info->board_info + i);
+		if (spidev)
+			spidev->max_speed_hz =
+					  sp->info->board_info[i].max_speed_hz;
 	}
 
 	return 0;
Index: linux-2.6.24-rc8/include/asm-arm/arch-s3c2410/spi-gpio.h
===================================================================
--- linux-2.6.24-rc8.orig/include/asm-arm/arch-s3c2410/spi-gpio.h
+++ linux-2.6.24-rc8/include/asm-arm/arch-s3c2410/spi-gpio.h
@@ -22,11 +22,12 @@
 	unsigned long		 pin_miso;
 
 	int			 bus_num;
+	int			 num_chipselect;
 
 	unsigned long		 board_size;
 	struct spi_board_info	*board_info;
 
-	void (*chip_select)(struct s3c2410_spigpio_info *spi, int cs);
+	void (*chip_select)(struct s3c2410_spigpio_info *spi, int csid, int cs);
 };
 
 
Index: linux-2.6.24-rc8/include/linux/lis302dl.h
===================================================================
--- linux-2.6.24-rc8.orig/include/linux/lis302dl.h
+++ linux-2.6.24-rc8/include/linux/lis302dl.h
@@ -5,6 +5,7 @@
 
 struct lis302dl_platform_data {
 	char *name;
+	unsigned long pin_chip_select;
 };
 
 #endif /* _LINUX_LIS302DL_H */
Index: linux-2.6.24-rc8/arch/arm/mach-s3c2410/mach-gta01.c
===================================================================
--- linux-2.6.24-rc8.orig/arch/arm/mach-s3c2410/mach-gta01.c
+++ linux-2.6.24-rc8/arch/arm/mach-s3c2410/mach-gta01.c
@@ -521,7 +521,7 @@
 	},
 };
 
-static void spi_gpio_cs(struct s3c2410_spigpio_info *spi, int cs)
+static void spi_gpio_cs(struct s3c2410_spigpio_info *spi, int csidx, int cs)
 {
 	switch (cs) {
 	case BITBANG_CS_ACTIVE:
Index: linux-2.6.24-rc8/arch/arm/mach-s3c2410/mach-qt2410.c
===================================================================
--- linux-2.6.24-rc8.orig/arch/arm/mach-s3c2410/mach-qt2410.c
+++ linux-2.6.24-rc8/arch/arm/mach-s3c2410/mach-qt2410.c
@@ -217,7 +217,7 @@
 
 /* SPI */
 
-static void spi_gpio_cs(struct s3c2410_spigpio_info *spi, int cs)
+static void spi_gpio_cs(struct s3c2410_spigpio_info *spi, int csidx, int cs)
 {
 	switch (cs) {
 	case BITBANG_CS_ACTIVE:
